# sparse-search-service/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sparse-search-service
  namespace: nyro-develop
  labels:
    app: sparse-search-service
    app.kubernetes.io/name: sparse-search-service
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: atenex-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sparse-search-service
  template:
    metadata:
      labels:
        app: sparse-search-service
        app.kubernetes.io/name: sparse-search-service
        app.kubernetes.io/version: "1.0.0"
    spec:
      # serviceAccountName: sparse-search-runtime-sa # SA para el runtime, con permisos de lectura en GCS
      containers:
        - name: sparse-search-service-container
          image: ghcr.io/dev-nyro/sparse-search-service:develop-8102eb9 # Reemplaza con tu imagen
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8004
              protocol: TCP
          envFrom:
            - configMapRef:
                name: sparse-search-service-config
            - secretRef:
                name: sparse-search-service-secrets # Para SPARSE_POSTGRES_PASSWORD
          env:
            - name: SPARSE_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sparse-search-service-secrets
                  key: SPARSE_POSTGRES_PASSWORD
          # Para GCS: Asumiendo Workload Identity o un SA montado para el runtime
          # Si usas clave JSON montada para el runtime (menos ideal que Workload Identity):
          # - name: GOOGLE_APPLICATION_CREDENTIALS
          #   value: "/etc/gcp-runtime-sa-keys/key.json"
          # volumeMounts:
          # - name: gcp-runtime-sa-key-volume
          #   mountPath: "/etc/gcp-runtime-sa-keys"
          #   readOnly: true

          resources:
            requests:
              memory: "1Gi" # Aumentado para el caché LRU y objetos BM25
              cpu: "500m"
            limits:
              memory: "4Gi"
              cpu: "2000m"
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            # volumes: # Si montas clave JSON para el runtime
            # - name: gcp-runtime-sa-key-volume
            #   secret:
            #     secretName: sparse-search-gcs-sa-key # O un secreto específico para el runtime
